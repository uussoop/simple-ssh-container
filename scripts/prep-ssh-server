#!/bin/bash
if [ $DEBUG_MODE == true ]; then
    set -x
fi



SSH_USER_HOME="${SSH_USER_HOME:-"/home/$SSH_USER"}"

# Create our SSH user
groupadd -r -g $PGID $SSH_GROUP
useradd --no-log-init -m -r -s /usr/bin/bash -d $SSH_USER_HOME -u $PUID -g $PGID $SSH_USER

if [[ $S6_LOGGING != 1 ]]; then


echo '
-------------------------------------
👋 SSH User Information
-------------------------------------'
echo "
User uid:    $(id -u $SSH_USER)
User gid:    $(id -g $SSH_USER)
Username:    $SSH_USER
User Group:  $SSH_GROUP
-------------------------------------
"
fi


# Check if SSH host keys are missing
if [ ! -f $SSH_HOST_KEY_DIR/ssh_host_rsa_key ] || [ ! -f $SSH_HOST_KEY_DIR/ssh_host_ecdsa_key ] || [ ! -f $SSH_HOST_KEY_DIR/ssh_host_ed25519_key ]; then
  echo "🏃‍♂️ Generating SSH keys for you..."
  dpkg-reconfigure openssh-server
  # Check if the host directory exists. Create it if needed
  if [ ! -d $SSH_HOST_KEY_DIR ]; then
    mkdir -p $SSH_HOST_KEY_DIR
  fi
  find /etc/ssh/ -type f -name "ssh_host_*" -exec mv -t $SSH_HOST_KEY_DIR "{}" \;
fi





SSH_USER_HOME="${SSH_USER_HOME:-"/home/$SSH_USER"}"

#########################################
# Prep SSHD configuration
#
echo "🤖 Setting SSHD configuration..."
{
  echo "Port ${SSH_PORT}"
  echo "PermitRootLogin no"
  echo "DebianBanner no"
  echo "PermitEmptyPasswords no"
  echo "MaxAuthTries 5"
  echo "LoginGraceTime 20"
  echo "ChallengeResponseAuthentication no"
  echo "KerberosAuthentication no"
  echo "GSSAPIAuthentication no"
  echo "X11Forwarding no"
  echo "AllowAgentForwarding yes"
  echo "AllowTcpForwarding yes"
  echo "PermitTunnel yes"
  echo "HostKey ${SSH_HOST_KEY_DIR}/ssh_host_rsa_key"
  echo "HostKey ${SSH_HOST_KEY_DIR}/ssh_host_ecdsa_key"
  echo "HostKey ${SSH_HOST_KEY_DIR}/ssh_host_ed25519_key"
} > /etc/ssh/sshd_config.d/custom.conf

if [ $DEBUG_MODE == true ]; then
  echo "🔥🔥🔥 Putting SSH server into Debug Mode..."
  {
      echo "SyslogFacility AUTHPRIV"
      echo "LogLevel DEBUG"
  } >> /etc/ssh/sshd_config.d/custom.conf
fi

# Make the SSH directory 
mkdir -p $SSH_USER_HOME/.ssh/

#########################################
# Prep authentication with authorized keys 
#

## Example variable:
# AUTHORIZED_KEYS="ssh-ed25519 123456789098765432asdfghjklkjhgfd myuser"

set_authorized_keys_from_variable () {
  echo "🔑 Setting authorized keys (from AUTHORIZED_KEYS variable)..."
  echo "${AUTHORIZED_KEYS}" > $SSH_USER_HOME/.ssh/authorized_keys
}

set_authorized_keys_from_file () {
  echo "🔐 Using the provided authorized_keys file..."
  # Copy the authorized_keys file to the user's home directory
  # This is a workaround for https://github.com/docker/compose/issues/9648
  # The UID an GID options are not working with Docker Compose
  cp /authorized_keys $SSH_USER_HOME/.ssh/authorized_keys
}

# ✅ AUTHORIZED_KEYS Variable, ❌ authorized_keys File: Use the variable
if [ -v AUTHORIZED_KEYS ] && ! [ -f /authorized_keys ]; then
  set_authorized_keys_from_variable

# ❌ AUTHORIZED_KEYS Variable, ✅ authorized_keys File: Use the file
elif [ -z $AUTHORIZED_KEYS ] && [ -f  ]; then
  set_authorized_keys_from_file

# ✅ AUTHORIZED_KEYS Variable, ✅ authorized_keys File:  Use the variable
elif [ -v AUTHORIZED_KEYS ] && [ -f /authorized_keys ]; then
  echo "⚠️ WARNING: Both AUTHORIZED_KEYS and authorized_keys file are set."
  echo "ℹ️ INFO: We'll be using the AUTHORIZED_KEYS variable to configure SSH."
  set_authorized_keys_from_variable

# ❌ AUTHORIZED_KEYS Variable, ❌ authorized_keys File: Stop the container
else
  printf "🚨🚨🚨 CONFIGURATION ERROR:\n"
  printf "You must either set the AUTHORIZED_KEYS\n"
  printf "environment variable or mount a configuration file to\n"
  printf "SSH_USER_HOME/.ssh/authorized_keys.\n"
  printf "Exiting...\n"
  # Kill PID 1 so the container stops
  kill -15 1
fi

# Secure the authorized keys file
chmod 700 $SSH_USER_HOME/.ssh/authorized_keys

# Set proper permissions
chown -R $SSH_USER:$SSH_GROUP $SSH_USER_HOME/.ssh/

#########################################
# Set allowed IPs
#

## Example Variable:
# ALLOWED_IPS="AllowUsers *@192.168.1.0/24 *@172.16.0.1 *@10.0.*.1"

# ❌ ALLOWED_IPS Variable
if [ -z "${ALLOWED_IPS}" ]; then
  printf "🚨🚨🚨 CONFIGURATION ERROR:\n"
  printf "ALLOWED_IPS environment variable is not set.\n"
  printf "Exiting...\n"
  # Kill PID 1 so the container stops
  kill -15 1
else
  echo "📡 Setting allowed IPs (from ALLOWED_IPS variable) ..."
  echo "${ALLOWED_IPS}" >> /etc/ssh/sshd_config.d/custom.conf
fi

/usr/sbin/sshd -D -e